@keyframes vex-fadein {
    0% {
        opacity: 0;
    }
    100% {
        opacity: 1;
    }
}

@keyframes vex-fadeout {
    0% {
        opacity: 1;
    }
    100% {
        opacity: 0;
    }
}

@keyframes vex-flyin {
    0% {
        opacity: 0;
        //margin-top: -$gap-double; //removing margin animation from css because margin is set in js
        //@include translateY(-$gap-double);
    }
    100% {
        opacity: 1;
        //margin-top: 0;
        //@include translateY(0);
    }
}

@keyframes vex-flyout {
    0% {
        opacity: 1;
        //margin-top: 0;
        //@include translateY(0);
    }
    100% {
        opacity: 0;
        //margin-top: -$gap-double;
        //@include translateY(-$gap-double);
    }
}

.vex {
    -webkit-overflow-scrolling: touch;
    @include fixedOverlay($background-color: null);
    //display: table;
    //height: 100%;
    //width: 100%;
}

.vex-overlay {
    @include fixedOverlay($background-color: $vex-overlay-background-color, $z-index: null);
    animation: vex-fadein 0.5s;
    .vex-closing & {
        animation: vex-fadeout 0.5s;
    }
}

.vex-content {
    //display: table-cell;
    //vertical-align: middle;
    //padding: $gap;
    //@include centerElement3d();
    position: absolute;
    padding: $gap-double + $base-font-size;
    background-color: $vex-content-background-color;
    animation: vex-flyin 0.5s;
    .vex:not(.modal-language) & {
        //width: 100%;
        width: calc(100% - #{$gap * 2});
        left: 50%;
        top: 50%;
        max-width: $vex-content-max-width;
    }
    .vex.modal-compare & {
        @include breakpoint($breakpoint-md) {
            padding-right: $gap;
            padding-left: $gap;
        }
    }
    .vex.modal-accessories & {
        background-color: $septenary-background-color;
        .title {
            @extend .bold;
            margin-bottom: $gap;
        }
    }
    .vex.modal-image & {
        .modal-trigger {
            @extend .hide;
        }
    }
    .vex.modal-language & {
        color: $light-font-color;
        width: calc(100% - #{$gap-double});
        height: calc(100% - #{$gap-double});
        background-color: $senary-background-color;
        vertical-align: middle;
        left: $gap;
        top: $gap;
        &.open {
            position: relative;
            display: table-cell;
        }
        .languages {
            padding: $gap 0;
            margin: $gap-double 0;
            border-top: 1px solid #212F3C;
            border-bottom: 1px solid #212F3C;
            a {
                &:not(.active) {
                    @extend .normal;
                }
            }
        }
        .logo {
            width: 340px;
            margin-bottom: $gap-double;
        }
        .vex-dialog-form {
            max-width: 1200px;
            margin: 0 auto;
        }
    }
    .vex-closing & {
        animation: vex-flyout 0.5s;
    }
}

.vex-close {
    position: absolute;
    line-height: 0;
    position: absolute;
    top: 0;
    right: 0;
    padding: $gap;
    cursor: pointer;
}

.vex-dialog-form {
    .vex-dialog-buttons {
        margin-top: $gap;
        .vex-button {
            float: right;
            @extend .button-brand-color;
        }
        .vex-link {
            float: left;
            margin: 0;
            @extend .bold;
            line-height: 1;
            margin-top: 8px;
            @include hoverLink($base-font-color);
            cursor: pointer;
        }
        /*
        > button {
            margin-left: $gap;
            &:first-child {
                margin-left: 0;
            }
        }
        */
    }
    .vex-dialog-message {
        .title {
            @extend .bold;
            margin: 0;
        }
        .body {
            margin-top: $gap-half;
            &:empty {
                display: none;
            }
        }
    }
}

// .modal-compare {
//     ul.default-list {
//         padding-top: $gap;
//     }
// }
// Prevent background scrolling when vex is open
// https://github.com/HubSpot/vex/issues/18
body.vex-open {
    @include breakpoint($breakpoint-lg) {
        overflow: hidden;
    }
}
